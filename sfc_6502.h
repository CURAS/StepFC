#pragma once
#include <stdint.h>
#include "sfc_famicom.h"
#include "sfc_cpu.h"

#define SFC_REG (famicom->registers)
#define SFC_PC (SFC_REG.pc)
#define SFC_A (SFC_REG.a)
#define SFC_X (SFC_REG.x)
#define SFC_Y (SFC_REG.y)
#define SFC_S (SFC_REG.s)
#define SFC_P (SFC_REG.p)

#define SFC_READ(a) sfc_read_cpu_address(a, famicom)
#define SFC_WRITE(a, v) sfc_write_cpu_address(a, v, famicom)
#define SFC_PUSH(v) sfc_write_cpu_address(0x100 + SFC_S--, v, famicom)
#define SFC_POP() sfc_read_cpu_address(0x100 + ++SFC_S, famicom)

#define SFC_CF_SET (SFC_P |= (uint8_t)SFC_FLAG_C)
#define SFC_ZF_SET (SFC_P |= (uint8_t)SFC_FLAG_Z)
#define SFC_IF_SET (SFC_P |= (uint8_t)SFC_FLAG_I)
#define SFC_DF_SET (SFC_P |= (uint8_t)SFC_FLAG_D)
#define SFC_BF_SET (SFC_P |= (uint8_t)SFC_FLAG_B)
#define SFC_RF_SET (SFC_P |= (uint8_t)SFC_FLAG_R)
#define SFC_VF_SET (SFC_P |= (uint8_t)SFC_FLAG_V)
#define SFC_SF_SET (SFC_P |= (uint8_t)SFC_FLAG_S)

#define SFC_CF_CLR (SFC_P &= ~(uint8_t)SFC_FLAG_C)
#define SFC_ZF_CLR (SFC_P &= ~(uint8_t)SFC_FLAG_Z)
#define SFC_IF_CLR (SFC_P &= ~(uint8_t)SFC_FLAG_I)
#define SFC_DF_CLR (SFC_P &= ~(uint8_t)SFC_FLAG_D)
#define SFC_BF_CLR (SFC_P &= ~(uint8_t)SFC_FLAG_B)
#define SFC_RF_CLR (SFC_P &= ~(uint8_t)SFC_FLAG_R)
#define SFC_VF_CLR (SFC_P &= ~(uint8_t)SFC_FLAG_V)
#define SFC_SF_CLR (SFC_P &= ~(uint8_t)SFC_FLAG_S)

#define SFC_CF_CHK (SFC_P & (uint8_t)SFC_FLAG_C)
#define SFC_ZF_CHK (SFC_P & (uint8_t)SFC_FLAG_Z)
#define SFC_IF_CHK (SFC_P & (uint8_t)SFC_FLAG_I)
#define SFC_DF_CHK (SFC_P & (uint8_t)SFC_FLAG_D)
#define SFC_BF_CHK (SFC_P & (uint8_t)SFC_FLAG_B)
#define SFC_RF_CHK (SFC_P & (uint8_t)SFC_FLAG_R)
#define SFC_VF_CHK (SFC_P & (uint8_t)SFC_FLAG_V)
#define SFC_SF_CHK (SFC_P & (uint8_t)SFC_FLAG_S)

enum {
	SFC_DISASSEMBLY_BUF_LEN = 32
};

typedef union {
	uint32_t data;
	struct {
		uint8_t op;
		uint8_t a1;
		uint8_t a2;
		uint8_t ctrl;
	};
} sfc_6502_code_t;

enum sfc_6502_addressing_mode {
	SFC_AM_UNK = 0,
	SFC_AM_ACC,
	SFC_AM_IMP,
	SFC_AM_IMM,
	SFC_AM_ABS,
	SFC_AM_ABX,
	SFC_AM_ABY,
	SFC_AM_ZPG,
	SFC_AM_ZPX,
	SFC_AM_ZPY,
	SFC_AM_IND,
	SFC_AM_INX,
	SFC_AM_INY,
	SFC_AM_REL,
};

static const uint8_t inslen[14] = {
	1,
	1,
	1,
	2,
	3,
	3,
	3,
	2,
	2,
	2,
	3,
	2,
	2,
	2,
};

enum sfc_6502_instruction {
	SFC_INS_UNK = 0,
	SFC_INS_ADC,
	SFC_INS_AHX,
	SFC_INS_ALR,
	SFC_INS_ANC,
	SFC_INS_AND,
	SFC_INS_ARR,
	SFC_INS_ASL,
	SFC_INS_AXS,
	SFC_INS_BCC,
	SFC_INS_BCS,
	SFC_INS_BEQ,
	SFC_INS_BIT,
	SFC_INS_BMI,
	SFC_INS_BNE,
	SFC_INS_BPL,
	SFC_INS_BRK,
	SFC_INS_BVC,
	SFC_INS_BVS,
	SFC_INS_CLC,
	SFC_INS_CLD,
	SFC_INS_CLI,
	SFC_INS_CLV,
	SFC_INS_CMP,
	SFC_INS_CPX,
	SFC_INS_CPY,
	SFC_INS_DCP,
	SFC_INS_DEC,
	SFC_INS_DEX,
	SFC_INS_DEY,
	SFC_INS_EOR,
	SFC_INS_INC,
	SFC_INS_INX,
	SFC_INS_INY,
	SFC_INS_ISC,
	SFC_INS_JMP,
	SFC_INS_JSR,
	SFC_INS_LAS,
	SFC_INS_LAX,
	SFC_INS_LDA,
	SFC_INS_LDX,
	SFC_INS_LDY,
	SFC_INS_LSR,
	SFC_INS_NOP,
	SFC_INS_ORA,
	SFC_INS_PHA,
	SFC_INS_PHP,
	SFC_INS_PLA,
	SFC_INS_PLP,
	SFC_INS_RLA,
	SFC_INS_ROL,
	SFC_INS_ROR,
	SFC_INS_RRA,
	SFC_INS_RTI,
	SFC_INS_RTS,
	SFC_INS_SAX,
	SFC_INS_SBC,
	SFC_INS_SEC,
	SFC_INS_SED,
	SFC_INS_SEI,
	SFC_INS_SHX,
	SFC_INS_SHY,
	SFC_INS_SLO,
	SFC_INS_SRE,
	SFC_INS_STA,
	SFC_INS_STP,
	SFC_INS_STX,
	SFC_INS_STY,
	SFC_INS_TAS,
	SFC_INS_TAX,
	SFC_INS_TAY,
	SFC_INS_TSX,
	SFC_INS_TXA,
	SFC_INS_TXS,
	SFC_INS_TYA,
	SFC_INS_XAA,
};

static const char* opnames[256] = {
	"BRK", "ORA", "STP", "SLO", "NOP", "ORA", "ASL", "SLO", "PHP", "ORA", "ASL", "ANC", "NOP", "ORA", "ASL", "SLO", "BPL", "ORA", "STP", "SLO", "NOP", "ORA", "ASL", "SLO", "CLC", "ORA", "NOP", "SLO", "NOP", "ORA", "ASL", "SLO",
	"JSR", "AND", "STP", "RLA", "BIT", "AND", "ROL", "RLA", "PLP", "AND", "ROL", "ANC", "BIT", "AND", "ROL", "RLA", "BMI", "AND", "STP", "RLA", "NOP", "AND", "ROL", "RLA", "SEC", "AND", "NOP", "RLA", "NOP", "AND", "ROL", "RLA",
	"RTI", "EOR", "STP", "SRE", "NOP", "EOR", "LSR", "SRE", "PHA", "EOR", "LSR", "ALR", "JMP", "EOR", "LSR", "SRE", "BVC", "EOR", "STP", "SRE", "NOP", "EOR", "LSR", "SRE", "CLI", "EOR", "NOP", "SRE", "NOP", "EOR", "LSR", "SRE",
	"RTS", "ADC", "STP", "RRA", "NOP", "ADC", "ROR", "RRA", "PLA", "ADC", "ROR", "ARR", "JMP", "ADC", "ROR", "RRA", "BVS", "ADC", "STP", "RRA", "NOP", "ADC", "ROR", "RRA", "SEI", "ADC", "NOP", "RRA", "NOP", "ADC", "ROR", "RRA",
	"NOP", "STA", "NOP", "SAX", "STY", "STA", "STX", "SAX", "DEY", "NOP", "TXA", "XAA", "STY", "STA", "STX", "SAX", "BCC", "STA", "STP", "AHX", "STY", "STA", "STX", "SAX", "TYA", "STA", "TXS", "TAS", "SHY", "STA", "SHX", "AHX",
	"LDY", "LDA", "LDX", "LAX", "LDY", "LDA", "LDX", "LAX", "TAY", "LDA", "TAX", "LAX", "LDY", "LDA", "LDX", "LAX", "BCS", "LDA", "STP", "LAX", "LDY", "LDA", "LDX", "LAX", "CLV", "LDA", "TSX", "LAS", "LDY", "LDA", "LDX", "LAX",
	"CPY", "CMP", "NOP", "DCP", "CPY", "CMP", "DEC", "DCP", "INY", "CMP", "DEX", "AXS", "CPY", "CMP", "DEC", "DCP", "BNE", "CMP", "STP", "DCP", "NOP", "CMP", "DEC", "DCP", "CLD", "CMP", "NOP", "DCP", "NOP", "CMP", "DEC", "DCP",
	"CPX", "SBC", "NOP", "ISC", "CPX", "SBC", "INC", "ISC", "INX", "SBC", "NOP", "SBC", "CPX", "SBC", "INC", "ISC", "BEQ", "SBC", "STP", "ISC", "NOP", "SBC", "INC", "ISC", "SED", "SBC", "NOP", "ISC", "NOP", "SBC", "INC", "ISC",
};

static const uint8_t opmodes[256] = {
	SFC_AM_IMP, SFC_AM_INX, SFC_AM_UNK, SFC_AM_INX, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_ACC, SFC_AM_IMM, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_REL, SFC_AM_INY, SFC_AM_UNK, SFC_AM_INY, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX,
	SFC_AM_ABS, SFC_AM_INX, SFC_AM_UNK, SFC_AM_INX, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_ACC, SFC_AM_IMM, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_REL, SFC_AM_INY, SFC_AM_UNK, SFC_AM_INY, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX,
	SFC_AM_IMP, SFC_AM_INX, SFC_AM_UNK, SFC_AM_INX, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_ACC, SFC_AM_IMM, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_REL, SFC_AM_INY, SFC_AM_UNK, SFC_AM_INY, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX,
	SFC_AM_IMP, SFC_AM_INX, SFC_AM_UNK, SFC_AM_INX, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_ACC, SFC_AM_IMM, SFC_AM_IND, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_REL, SFC_AM_INY, SFC_AM_UNK, SFC_AM_INY, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX,
	SFC_AM_IMM, SFC_AM_INX, SFC_AM_IMM, SFC_AM_INX, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_REL, SFC_AM_INY, SFC_AM_UNK, SFC_AM_INY, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPY, SFC_AM_ZPY, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABY, SFC_AM_ABY,
	SFC_AM_IMM, SFC_AM_INX, SFC_AM_IMM, SFC_AM_INX, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_REL, SFC_AM_INY, SFC_AM_UNK, SFC_AM_INY, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPY, SFC_AM_ZPY, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABY, SFC_AM_ABY,
	SFC_AM_IMM, SFC_AM_INX, SFC_AM_IMM, SFC_AM_INX, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_REL, SFC_AM_INY, SFC_AM_UNK, SFC_AM_INY, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX,
	SFC_AM_IMM, SFC_AM_INX, SFC_AM_IMM, SFC_AM_INX, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_ZPG, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_IMP, SFC_AM_IMM, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_ABS, SFC_AM_REL, SFC_AM_INY, SFC_AM_UNK, SFC_AM_INY, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_ZPX, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_IMP, SFC_AM_ABY, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX, SFC_AM_ABX,
};

void sfc_6502_disassembly(sfc_6502_code_t, char[SFC_DISASSEMBLY_BUF_LEN]);

void sfc_cpu_execute_one(sfc_famicom_t*);
