#pragma once
#include <stdint.h>

struct sfc_famicom;
typedef struct sfc_famicom sfc_famicom_t;

enum sfc_ppu_ctrl_flag {
	SFC_PPU_FLAG_VINC32 = 1 << 2,
	SFC_PPU_FLAG_SPPATN = 1 << 3,
	SFC_PPU_FLAG_BGPATN = 1 << 4,
	SFC_PPU_FLAG_SPSIZE = 1 << 5,
	SFC_PPU_FLAG_MASTER = 1 << 6,
	SFC_PPU_FLAG_VBNMIE = 1 << 7,
};

enum sfc_ppu_mask_flag {
	SFC_PPU_FLAG_GRAYSC = 1 << 0,
	SFC_PPU_FLAG_BGMASK = 1 << 1,
	SFC_PPU_FLAG_SPMASK = 1 << 2,
	SFC_PPU_FLAG_BGENAB = 1 << 3,
	SFC_PPU_FLAG_SPENAB = 1 << 4,
	SFC_PPU_FLAG_NTSCRE = 1 << 5,
	SFC_PPU_FLAG_NTSCGE = 1 << 6,
	SFC_PPU_FLAG_NTSCBE = 1 << 7,
	SFC_PPU_FLAG_PALGEN = SFC_PPU_FLAG_NTSCRE,
	SFC_PPU_FLAG_PALREN = SFC_PPU_FLAG_NTSCGE,
	SFC_PPU_FLAG_PALBEN = SFC_PPU_FLAG_NTSCBE,
};

enum sfc_ppu_status_flag {
	SFC_PPU_FLAG_SPOVER = 1 << 5,
	SFC_PPU_FLAG_SP0HIT = 1 << 6,
	SFC_PPU_FLAG_VBLANK = 1 << 7,
};

typedef struct {
	uint8_t ctrl;
	uint8_t mask;
	uint8_t status;
	uint8_t sprite_pt;
	uint8_t scroll[2];
	uint16_t vram_pt;
	uint8_t double_write_pos;
	uint8_t vram_cache;
} sfc_ppu_registers_t;

typedef struct {
	sfc_ppu_registers_t registers;
	uint8_t sprite_ram[256];
	uint8_t palette_indexes[32];
	uint8_t* banks[0x4000 >> 10];
	uint8_t video_memory[2 * 1024];
	uint8_t video_memory_ex[2 * 1024];
} sfc_ppu_t;

static const union {
	struct { uint8_t r, g, b, a; };
	uint32_t data;
} sfc_stdpalette[64] = {
	{ 0x7F, 0x7F, 0x7F, 0xFF }, { 0x20, 0x00, 0xB0, 0xFF }, { 0x28, 0x00, 0xB8, 0xFF }, { 0x60, 0x10, 0xA0, 0xFF },
	{ 0x98, 0x20, 0x78, 0xFF }, { 0xB0, 0x10, 0x30, 0xFF }, { 0xA0, 0x30, 0x00, 0xFF }, { 0x78, 0x40, 0x00, 0xFF },
	{ 0x48, 0x58, 0x00, 0xFF }, { 0x38, 0x68, 0x00, 0xFF }, { 0x38, 0x6C, 0x00, 0xFF }, { 0x30, 0x60, 0x40, 0xFF },
	{ 0x30, 0x50, 0x80, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF },
	{ 0xBC, 0xBC, 0xBC, 0xFF }, { 0x40, 0x60, 0xF8, 0xFF }, { 0x40, 0x40, 0xFF, 0xFF }, { 0x90, 0x40, 0xF0, 0xFF },
	{ 0xD8, 0x40, 0xC0, 0xFF }, { 0xD8, 0x40, 0x60, 0xFF }, { 0xE0, 0x50, 0x00, 0xFF }, { 0xC0, 0x70, 0x00, 0xFF },
	{ 0x88, 0x88, 0x00, 0xFF }, { 0x50, 0xA0, 0x00, 0xFF }, { 0x48, 0xA8, 0x10, 0xFF }, { 0x48, 0xA0, 0x68, 0xFF },
	{ 0x40, 0x90, 0xC0, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF },
	{ 0xFF, 0xFF, 0xFF, 0xFF }, { 0x60, 0xA0, 0xFF, 0xFF }, { 0x50, 0x80, 0xFF, 0xFF }, { 0xA0, 0x70, 0xFF, 0xFF },
	{ 0xF0, 0x60, 0xFF, 0xFF }, { 0xFF, 0x60, 0xB0, 0xFF }, { 0xFF, 0x78, 0x30, 0xFF }, { 0xFF, 0xA0, 0x00, 0xFF },
	{ 0xE8, 0xD0, 0x20, 0xFF }, { 0x98, 0xE8, 0x00, 0xFF }, { 0x70, 0xF0, 0x40, 0xFF }, { 0x70, 0xE0, 0x90, 0xFF },
	{ 0x60, 0xD0, 0xE0, 0xFF }, { 0x60, 0x60, 0x60, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF },
	{ 0xFF, 0xFF, 0xFF, 0xFF }, { 0x90, 0xD0, 0xFF, 0xFF }, { 0xA0, 0xB8, 0xFF, 0xFF }, { 0xC0, 0xB0, 0xFF, 0xFF },
	{ 0xE0, 0xB0, 0xFF, 0xFF }, { 0xFF, 0xB8, 0xE8, 0xFF }, { 0xFF, 0xC8, 0xB8, 0xFF }, { 0xFF, 0xD8, 0xA0, 0xFF },
	{ 0xFF, 0xF0, 0x90, 0xFF }, { 0xC8, 0xF0, 0x80, 0xFF }, { 0xA0, 0xF0, 0xA0, 0xFF }, { 0xA0, 0xFF, 0xC8, 0xFF },
	{ 0xA0, 0xFF, 0xF0, 0xFF }, { 0xA0, 0xA0, 0xA0, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }
};

uint8_t sfc_read_ppu_address(uint16_t, sfc_ppu_t*);

void sfc_write_ppu_address(uint16_t, uint8_t, sfc_ppu_t*);

uint8_t sfc_read_ppu_register_via_cpu(uint16_t, sfc_ppu_t*);

void sfc_write_ppu_register_via_cpu(uint16_t, uint8_t, sfc_ppu_t*);
